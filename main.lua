local f      = require 'functions'local anim8  = require 'anim8'  --https://love2d.org/wiki/anim8local HC     = require 'HC'     --https://love2d.org/wiki/HClocal input  = require 'input'	local scale = 2	canvasX = 640	canvasY = 480	local canvas = love.graphics.newCanvas(canvasX, canvasY)	canvas:setFilter    ("nearest", "nearest")    love.window.setMode (canvasX*scale, canvasY*scale)--############ Load Event ############function love.load( )  fps = love.timer.getFPS( )    --Initial Variables--  _Debug      =                false  IsColliding =                false  osString    = love.system.getOS( )  velocity    =                    1  j           =                    0  inputsload()  --Add a circle to Mouse Position (Active only on debug)--  mouse = HC.circle           ( 400, 300, 20 )   MouseX, MouseY = love.mouse.getPosition( )  --TODO: fix mouse position bugs    mouse:moveTo ( MouseX , MouseY )  --Get window sizes--  windowX,windowY = love.graphics.getDimensions( )     --Initial Player Position--  posX =           canvasX*.1  posY =           canvasY*.5    --Placeholder animation grid--  image        = love.graphics.newImage ( 'media/1945.png' )  local grid64 = anim8.newGrid          ( 64, 64, 1024, 768, 299, 101,   2)    --Sets background color--  love.graphics.setBackgroundColor ( 137, 161, 216 )     --Objects--  player   = anim8.newAnimation     ( grid64( 1,'1-3' ), 0.1 ) --Player Placeholder  enemy    = love.graphics.newImage ( "enemy.png" )            --Blue Block placeholder  particle = love.graphics.newImage ( "particle.png" )         --Particle Test placeholder    --Colliders--  playerCol = HC.rectangle ( posX, posY, 64, 64 )end--############ Draw Event ############function love.draw()	  --Draw Objects--  DrawSine           (0, posY, 40)                     --Draw SineWave  player:draw        (image, posX, posY, 0)            --Draw player  love.graphics.draw (enemy, (canvasX*.9), canvasY*.5) --Draw Enemy    --Draw Debug info--  if (_Debug == true) or (osString == "Android") then    playerCol:draw ( 'line' )	mouse    :draw ( 'fill' )       Debug( fps                   , "FPS"        , 0 )	   Debug( velocity              , "Velocity"   , 1 )	   Debug( tostring (fullscreen_), "FullScreen" , 2 )	   Debug( tostring (touchNumber), "TouchNumber", 3 )	   Debug( tostring (IsColliding), "IsColliding", 4 )	   Debug( osString              , "Device"     , 5 )  end	--Set canvas to nill?	love.graphics.setCanvas()	--Draw Window Background block (Prevents glitch when change fullscreen mode)	r, g, b, a = love.graphics.getColor ( )	love.graphics.setColor (0, 0, 0, 255)    _background = love.graphics.rectangle ("fill",0, 0,  windowX, windowY)	love.graphics.setColor (r, g, b, a)    --Draw Canvas	love.graphics.draw (  canvas                       ,(  windowX/2)-((canvasX*scale)/2  )					   ,(  windowY/2)-((canvasY*scale)/2  )					   ,0, scale, scale					   )	love.graphics.setCanvas (canvas)end--############ Update Event ############function love.update ( dt )  fps = love.timer.getFPS( )  inputs( dt ) --Keyboard and touch inputs  --Get Fullscreen Status--  fullscreen_, fulltype = love.window.getFullscreen( )     --Mouse position update TODO: fix mouse position bugs  MouseX, MouseY = love.mouse.getPosition( )  mouse:moveTo ( MouseX , MouseY )    player:update( dt )    --Check for Collisions--  for shape, delta in pairs ( HC.collisions(mouse) ) do     playerIsColiding = true;  end   if (playerIsColiding == true) then     IsColliding      = true     playerIsColiding = false  else      IsColliding     = false  end  playerCol:moveTo ( posX+32, posY+32)  --Function Keys--  function love.keypressed (key)	     --FullScreen Key--     if key == "f11" then        love.window.setFullscreen (not fullscreen_) --Set fullscreen status     end	    	 --Show/hide Debug Key--     if key == "f9"  then	        _Debug = not _Debug	 end  end  windowX, windowY = love.graphics.getDimensions( ) --Updates the dimensions every frameend